/**
 * Clase handler para el trigger del sobject EmailMessage
 **
 * @author nts (agonzalezisasi)
 * @date 01/12/2021
 */
public class EmailMessageHandler implements ITrigger
{
    EmailMessagesUtil emailMessagesUtil;

    public EmailMessageHandler()
    {
        emailMessagesUtil = new EmailMessagesUtil();
    }

    /**
     * bulkBefore
     *
     * This method is called prior to execution of a BEFORE trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkBefore(List<SObject> newList, Map<Id, SObject> oldMap)
    {
        // Check if the emails are valid for the Genesys Routing
        emailMessagesUtil.checkEmailMessageForGenesysRouting(
            (List<EmailMessage>) newList,
            Trigger.isInsert
            );
    }

    /**
     * bulkAfter
     *
     * This method is called prior to execution of an AFTER trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkAfter(List<SObject> newList, Map<Id, SObject> oldMap)
    {
    }

    /**
     * beforeInsert
     *
     * This method is called iteratively for each record to be inserted during a BEFORE
     * trigger. Never execute any SOQL/SOSL etc in this and other iterative methods.
     */
    public void beforeInsert(List<SObject> newList)
    {
        emailMessagesUtil.checkNewCaseFromClosedCase( (List<EmailMessage>) newList );
        emailMessagesUtil.assignGenesysRoutingFields();
        emailMessagesUtil.checkExistingCaseZDAUrgencias( (List<EmailMessage>) newList );
    }

    /**
     * beforeUpdate
     *
     * This method is called iteratively for each record to be updated during a BEFORE
     * trigger.
     */
    public void beforeUpdate(List<SObject> newList, Map<Id, SObject> oldMap)
    {
        emailMessagesUtil.assignGenesysRoutingFields();
    }

    /**
     * beforeDelete
     *
     * This method is called iteratively for each record to be deleted during a BEFORE
     * trigger.
     */
    public void beforeDelete(Map<Id, SObject> oldMap)
    {
    }

    /**
     * afterInsert
     *
     * This method is called iteratively for each record inserted during an AFTER
     * trigger. Always put field validation in the 'After' methods in case another trigger
     * has modified any values. The record is 'read only' by this point.
     */
    public void afterInsert(List<SObject> newList)
    {
    }

    /**
     * afterUpdate
     *
     * This method is called iteratively for each record updated during an AFTER
     * trigger.
     */
    public void afterUpdate(List<SObject> newList, Map<Id, SObject> oldMap)
    {
        emailMessagesUtil.checkIfMailOnlyInCc( (List<EmailMessage>) newList );
        emailMessagesUtil.checkMailCc( (List<EmailMessage>) newList );
        emailMessagesUtil.checkIdGenesys( (List<EmailMessage>) newList );

    }

    /**
     * afterDelete
     *
     * This method is called iteratively for each record deleted during an AFTER
     * trigger.
     */
    public void afterDelete(Map<Id, SObject> oldMap)
    {
    }

    /**
     * andFinally
     *
     * This method is called once all records have been processed by the trigger. Use this
     * method to accomplish any final operations such as creation or updates of other records.
     */
    public void andFinally(Map<Id, SObject> oldMap, Map<Id, SObject> newMap)
    {
        if (Trigger.isAfter && Trigger.isInsert)
        {
            emailMessagesUtil.markPublicActivity( (Map<Id, EmailMessage>) newMap );
            emailMessagesUtil.relateNewParentCaseWithMediatedAccountOCS( newMap.values() );
            emailMessagesUtil.setCaseSourceAreaByEmailAddress( newMap.values() );
        }

    }
}