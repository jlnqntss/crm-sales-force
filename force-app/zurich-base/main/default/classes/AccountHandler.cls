/**
 * @description       :
 * @author            : jgallaga
 * @group             :
 * @last modified on  : 12/09/2024
 * @last modified by  : rserrano
**/
public with sharing class AccountHandler implements ITrigger
{
    public AccountHandler()
    {}

    /**
     * bulkBefore
     *
     * This method is called prior to execution of a BEFORE trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkBefore(List<SObject> newList, Map<Id, SObject> oldMap)
    {}

    /**
     * bulkAfter
     *
     * This method is called prior to execution of an AFTER trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkAfter(List<SObject> newList, Map<Id, SObject> oldMap)
    {}

    /**
     * beforeInsert
     *
     * This method is called iteratively for each record to be inserted during a BEFORE
     * trigger. Never execute any SOQL/SOSL etc in this and other iterative methods.
     */
    public void beforeInsert(List<SObject> newList)
    {
       List<SObject> processList = TriggerBypassUtility.gdprBypass(newList);
       AccountLeadUtil.checkLeadDuplicates(processList);
    }

    /**
     * beforeUpdate
     *
     * This method is called iteratively for each record to be updated during a BEFORE
     * trigger.
     */
    public void beforeUpdate(List<SObject> newList, Map<Id, SObject> oldMap)
    {
        TriggerBypassUtility.throwExceptionIfBlockedOrAnonymized(newList, oldMap);
        List<SObject> processList = TriggerBypassUtility.gdprBypass(newList);
        // marcamos los mediadores que han sufrido cambios de agrupaci√≥n zrm para procesarlos posteriormente con el batch Batch_RecalcVisibilityIntermediaryGroup
        if (!Test.isRunningTest()) {
            AccountUtil.zrmVisibility(processList, (Map<Id,Account>) oldMap);
        }
    }

    /**
     * beforeDelete
     *
     * This method is called iteratively for each record to be deleted during a BEFORE
     * trigger.
     */
    public void beforeDelete(Map<Id, SObject> oldMap)
    {}

    /**
     * afterInsert
     *
     * This method is called iteratively for each record inserted during an AFTER
     * trigger. Always put field validation in the 'After' methods in case another trigger
     * has modified any values. The record is 'read only' by this point.
     */
    public void afterInsert(List<SObject> newList)
    {
        List<SObject> processList = TriggerBypassUtility.gdprBypass(newList);
        AccountUtil.generateScope(processList);
        AccountLeadUtil.createScopesForVentaLeads(processList,null);
        AccountUtil.zrmNewLeadVisibility(processList);
    }

    /**
     * afterUpdate
     *
     * This method is called iteratively for each record updated during an AFTER
     * trigger.
     */
    public void afterUpdate(List<SObject> newList, Map<Id, SObject> oldMap)
    {
        List<SObject> processList = TriggerBypassUtility.gdprBypass(newList, oldMap);
        AccountLeadUtil.createScopesForVentaLeads(processList,(Map<Id,Account>)oldMap);
         
    }

    /**
     * afterDelete
     *
     * This method is called iteratively for each record deleted during an AFTER
     * trigger.
     */
    public void afterDelete(Map<Id, SObject> oldMap)
    {}

    /**
     * andFinally
     *
     * This method is called once all records have been processed by the trigger. Use this
     * method to accomplish any final operations such as creation or updates of other records.
     */
    public void andFinally(Map<Id, SObject> oldMap, Map<Id, SObject> newMap)
    {}
}