public with sharing class PoliciesSelector extends RecordsSelector
{
    //#region Contructores

    public PoliciesSelector()
    {
        super(Policy__c.getSObjectType());
    }

    //#endregion

    /**
     * Aplicar el filtro de scope a los registros obtenidos en la búsqueda
     * @author adelgado
     * @date 28/01/2021
     * @param  scope  Scope a aplicar en el filtro
     * @return        Instancia de PoliciesSelector con el filtro de scope aplicado
     */
    public PoliciesSelector setScope(RecordsSelector.Scope scope)
    {
        switch on scope 
        {
            when Z 
            {
                this.baseQuery.addConditionEq(Policy__c.Scope__c, 'Z');
            }
            when ZE  
            {
                this.baseQuery.addConditionEq(Policy__c.Scope__c, 'ZE');
            }
            when ZEO
            {
                this.baseQuery.addConditionEq(Policy__c.Scope__c, 'ZEO');
            }
            when else 
            {
                // else code
            }
        }

        return this;
    }

    /**
     * Aplicar el filtro de entidad legal a los registros obtenidos en la búsqueda
     * @author adelgado
     * @date 28/01/2021
     * @param  legalEntity  Entidad legal a aplicar en el filtro
     * @return              Instancia de PoliciesSelector con el filtro de entidad legal aplicado
     */
    public PoliciesSelector setLegalEntity(RecordsSelector.LegalEntity legalEntity)
    {
        switch on legalEntity 
        {
            when GI, LIFE
            {
                this.baseQuery.addConditionEq(Policy__c.LegalEntity__c, RecordsSelector.getLegalEntity(legalEntity));
            }
            when else 
            {
                // else code
            }
        }

        return this;
    }

    /**
     * Busca pólizas a partir de PolicyHolder y InfoPolicyNumber__c
     *
     * @author rlopez
     * @date 03/12/2020
     * @param  policyHolder    Id de la cuenta a la que pertenece la póliza
     * @param  policyNumbers   Listado de números de póliza a buscar
     * @return                 Listado de pólizas sobre los que se ha realizado match
     */
    public List<Policy__c> selectByHolderAndNumber(Id policyHolder, Set<String> policyNumbers)
    {
        if(policyHolder != null && policyNumbers != null)
        {
            this.baseQuery.selectReadableFields();
            this.baseQuery.addConditionEq(Policy__c.PolicyHolder__c, policyHolder).addConditionIn(Policy__c.InfoPolicyNumber__c, policyNumbers);

            return (List<Policy__c>) this.baseQuery.run();
        }
        else
        {
            return new List<Policy__c>();
        }
    }

    /**
     * Busca pólizas a partir del Id de la oportunidad relacionada
     *
     * @author rlopez
     * @date 11/12/2020
     * @param  policyNumbers   Listado de Ids de oportunidades
     * @return                 Listado de pólizas sobre los que se ha realizado match
     */
    public List<Policy__c> selectByOpportunityName(Set<Id> offers)
    {
        if(offers != null)
        {
            this.baseQuery.addConditionIn(Policy__c.OpportunityName__c, offers);

            return (List<Policy__c>) this.baseQuery.run();
        }
        else
        {
            return new List<Policy__c>();
        }
    }

    /**
     * Busca pólizas activas a partir de PolicyHolder (tomador)
     *
     * @author xsobera
     * @date 20/01/2021
     * @param Id policyHolder  Id de la cuenta a la que pertenece la póliza
     * @return List<Policy__c> Listado de pólizas sobre los que se ha realizado match
     * 
     * @change OCS-1512 - 04/05/2021 - nts (agonzalezisasi) - La condicion de poliza activa se cambia de fechas a Estado igual a V
     */
    public List<Policy__c> selectByHolder(Id policyHolder)
    {
        if(policyHolder != null)
        {
            this.baseQuery.addConditionEq(Policy__c.PolicyHolder__c, policyHolder).addConditionEq(Policy__c.PolicyStatus__c, 'V');

            return (List<Policy__c>) this.baseQuery.run();
        }
        else
        {
            return new List<Policy__c>();
        }
    }

    /**
     * Busca pólizas a partir de InfoPolicyNumber__c (Número de Póliza en transaccional INFO)
     * No se tiene en cuenta activa o no ya que se busca por un número de póliza específico
     *
     * @author xsobera
     * @date 20/01/2021
     * @param String policyNumber Número de póliza a buscar
     * @return List<Policy__c> Listado de pólizas sobre los que se ha realizado match
     */
    public List<Policy__c> selectByNumber(String policyNumber)
    {
        if(String.isNotBlank(policyNumber))
        {
            this.baseQuery.selectReadableFields();
            this.baseQuery.addConditionEq(Policy__c.InfoPolicyNumber__c, policyNumber.leftPad(14, '0'));

            return (List<Policy__c>) this.baseQuery.run();
        }
        else
        {
            return new List<Policy__c>();
        }
    }

    /**
     * Busca pólizas a partir de InfoPolicyNumber__c (Número de Póliza en transaccional INFO)
     * No se tiene en cuenta activa o no ya que se busca por un número de póliza específico
     *
     * @author xsobera
     * @date 20/01/2021
     * @param String policyNumber Número de póliza a buscar
     * @return List<Policy__c> Listado de pólizas sobre los que se ha realizado match
     */
    public List<Policy__c> selectByNumber(Set<String> lstPolicyNumber)
    {
        if(lstPolicyNumber != null && !lstPolicyNumber.isEmpty())
        {

            List<String> lstLeftPad = new List<String>();
            for(String s : lstPolicyNumber)
            {
                lstLeftPad.add(s.leftPad(14, '0'));
            }

            this.baseQuery.selectReadableFields();
            this.baseQuery.addConditionIn(Policy__c.InfoPolicyNumber__c, lstLeftPad);

            return (List<Policy__c>) this.baseQuery.run();
        }
        else
        {
            return new List<Policy__c>();
        }
    }

    /**
     * Busca pólizas a partir de un listado de NationalIds y números de póliza
     *
     * @author jpereztirado
     * @date 27/10/2022
     * @param List<String> infoPolicyNumbers Números de pólizas a buscar
     * @param List<String> nationalIds NationalIds a buscar
     * @return List<Policy__c> Listado de pólizas sobre los que se ha realizado match
     */
    public List<Policy__c> selectByInfoPolicyNumberAndNationalId(List<String>  nationalIds, List<String> infoPolicyNumbers) {       
        if(nationalIds != null && infoPolicyNumbers != null)
        {
            this.baseQuery.selectReadableFields();
            this.baseQuery.addConditionIn('Policy__c.PolicyHolder__r.NationalId__c', nationalIds).addConditionIn(Policy__c.InfoPolicyNumber__c, infoPolicyNumbers);
            this.baseQuery.orderBy('Policy__c.PolicyHolder__r.NationalId__c');

            return (List<Policy__c>) this.baseQuery.run();
        }
        else
        {
            return new List<Policy__c>();
        }
    }


    /**
     * Busca pólizas a las cuales se recalculará la visibilidad de ZRM para esos registros
     *
     * @author dmunoz
     * @date 19/09/2023
     * @return List<Policy__c> Listado de pólizas a las que recalcular la visibilidad
     */
    public String findPoliciesWithIncorrectVisibility() {

        String result = 'SELECT Id, PolicyHolder__r.Blocked__c, IntermediaryId__c, IntermediaryId__r.IsPartner,  ' +
                                                        'IntermediaryId__r.IntermediaryGroup__c, IntermediaryId__r.IntermediaryGroup__r.IntermediaryWithUser__c,  ' +
                                                        'IntermediaryVisibilityAcc__c, PolicyHolder__c  ' +
                                                        'FROM Policy__c ' +
                                                        'WHERE (IntermediaryVisibilityAcc__c != null OR IntermediaryId__r.IntermediaryGroup__c != null) ' +
                                                        'AND (IntermediaryVisibilityForm__c = null ' +
                                                        'OR (IntermediaryId__r.IsPartner = true AND IntermediaryVisibilityForm__c = \'MainIntermediary\') ' +
                                                        'OR (IntermediaryId__r.IsPartner = false AND IntermediaryVisibilityForm__c = \'CurrentIntermediary\'))';

        return result;
    }

    /**
     * Busca pólizas a las cuales se recalculará la visibilidad de ZRM para esos registros a partir de unos ids de clientes
     *
     * @author dmunoz
     * @date 19/09/2023
     * @return List<Policy__c> Listado de pólizas a las que recalcular la visibilidad
     */
    public String findPoliciesWithIncorrectVisibilityByAccountId(Set<String> accountIds) {

        String result;

        if (accountIds != null && !accountIds.isEmpty()) {
            result = 'SELECT Id, PolicyHolder__r.Blocked__c, IntermediaryId__c, IntermediaryId__r.IsPartner,  ' +
                                                            'IntermediaryId__r.IntermediaryGroup__c, IntermediaryId__r.IntermediaryGroup__r.IntermediaryWithUser__c,  ' +
                                                            'IntermediaryVisibilityAcc__c, PolicyHolder__c  ' +
                                                            'FROM Policy__c ' +
                                                            'WHERE PolicyHolder__c IN :accountIds AND (IntermediaryVisibilityAcc__c != null OR IntermediaryId__r.IntermediaryGroup__c != null) ' +
                                                            'AND (IntermediaryVisibilityForm__c = null ' +
                                                            'OR (IntermediaryId__r.IsPartner = true AND IntermediaryVisibilityForm__c = \'MainIntermediary\') ' +
                                                            'OR (IntermediaryId__r.IsPartner = false AND IntermediaryVisibilityForm__c = \'CurrentIntermediary\'))';

        }

        return result;
    }
}