/**
 * @description       : 
 * @author            : mfernandezcarrera
 * @group             : 
 * @last modified on  : 09-20-2024
 * @last modified by  : mfernandezcarrera
**/
public without sharing class ContactHandler implements ITrigger
{
    private static Map<Id, Contact> convertedMap;
    public ContactHandler()
    {}

    /**
     * bulkBefore
     *
     * This method is called prior to execution of a BEFORE trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkBefore(List<SObject> newList, Map<Id, SObject> oldMap)
    //If any process is added it must be added before -> Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass();
    {}

    /**
     * bulkAfter
     *
     * This method is called prior to execution of an AFTER trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkAfter(List<SObject> newList, Map<Id, SObject> oldMap)
    //If any process is added it must be added before -> Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass();
    {}

    /**
     * beforeInsert
     *
     * This method is called iteratively for each record to be inserted during a BEFORE
     * trigger. Never execute any SOQL/SOSL etc in this and other iterative methods.
     */
    public void beforeInsert(List<SObject> newList)
    //If any process is added it must be added before -> Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass();
    {}

    /**
     * beforeUpdate
     *
     * This method is called iteratively for each record to be updated during a BEFORE
     * trigger.
     */
    public void beforeUpdate(List<SObject> newList, Map<Id, SObject> oldMap)
    //If any process is added it must be added before -> Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass();
    {}

    /**
     * beforeDelete
     *
     * This method is called iteratively for each record to be deleted during a BEFORE
     * trigger.
     */
    public void beforeDelete(Map<Id, SObject> oldMap)
    //If any process is added it must be added before -> Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass();
    {}

    /**
     * afterInsert
     *
     * This method is called iteratively for each record inserted during an AFTER
     * trigger. Always put field validation in the 'After' methods in case another trigger
     * has modified any values. The record is 'read only' by this point.
     */
    public void afterInsert(List<SObject> newList)
    {
        List<SObject> processList = TriggerBypassUtility.gdprBypass(newList);
        ContactUtil.SummaryTotalContacts( (List<Contact>) processList, null );
        ContactUtil.generateHashContactId( (List<Contact>) processList, null );
    }

    /**
     * afterUpdate
     *
     * This method is called iteratively for each record updated during an AFTER
     * trigger.
     */
    public void afterUpdate(List<SObject> newList, Map<Id, SObject> oldMap)
    {

        List<SObject> processList = TriggerBypassUtility.gdprBypass(newList, oldMap);
        ContactUtil.updateQuoteStep4and5(
            (List<Contact>) processList,
            (Map<Id, Contact>) oldMap
            );
    }

    /**
     * afterDelete
     *
     * This method is called iteratively for each record deleted during an AFTER
     * trigger.
     */
    public void afterDelete(Map<Id, SObject> oldMap)
    {
        /*List<SObject> processList = TriggerBypassUtility.gdprBypass(newList, oldMap);
        ContactUtil.SummaryTotalContacts(null, (Map<Id, Contact>) oldMap);*/
        Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass(oldMap);
        convertedMap = ContactUtil.convertMap (processMap);
        //This conversion has been added due to the error "Invalid conversion from runtime type Map<Id,SObject> to Map<Id, CampaignMember>"
        ContactUtil.SummaryTotalContacts(null, (Map<Id, Contact>) convertedMap);

    }

    /**
     * andFinally
     *
     * This method is called once all records have been processed by the trigger. Use this
     * method to accomplish any final operations such as creation or updates of other records.
     */
    public void andFinally(Map<Id, SObject> oldMap, Map<Id, SObject> newMap)
    //If any process is added it must be added before -> Map<Id, SObject> processMap =  TriggerBypassUtility.gdprBypass();
    {}
}