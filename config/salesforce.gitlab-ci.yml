####################################################
# Salesforce Zurich CI - Pipelines
#
# Adaptación de los pipelines de NTS y la plantilla estándar 
# SF para GitLab
# para Zurich, aplicando estrategia git-flow
#
# author: jmartinezpisson
#
# Variables de entrada
#
# STAGING_SANDBOX_AUTH_URL:
# URL de autenticación SFDX para el entorno SF Staging
#
# QA_SANDBOX_AUTH_URL:
# URL de autenticación SFDX para el entorno SF QA
#
# DEVHUB_AUTH_URL:
# URL de autenticación SFDX para el DevHub de Zurich
#
# TEST_DISABLED: 
# Deshabilita tests preliminares/post-staging
#
# ALLOW_FAILURE
# Permite que las etapas de testing fallen
####################################################

####################################################
# Imagen Docker para los jobs. Puesto que el 
# pipeline es JS, se utiliza node.
####################################################
image: 807625060872.dkr.ecr.eu-west-1.amazonaws.com/capside/node/12


####################################################
# Cachea node modules entre jobs.
# https://docs.gitlab.com/ee/ci/yaml/README.html#cache
####################################################
cache:
  key: ${CI_COMMIT_REF_NAME}
  paths:
    - node_modules/
    - .sfdx/


####################################################
# Etapas del pipeline
# https://docs.gitlab.com/ee/ci/yaml/README.html#stages
####################################################
stages:
 - preliminary-testing
 - doc-generation
 - staging
 - test-apex
 - qa
 - production

before_script:
  - npm config set proxy "$HTTP_PROXY"
  - npm config set https-proxy "$HTTPS_PROXY"

####################################################
# Ejecuta los tests LWC sobre el runner, sin org.
# Previene el esfuerzo de realizar un deploy.
####################################################
test-lwc:
  stage: preliminary-testing
  except:
    variables:
      - $TEST_DISABLED
  allow_failure: false
  script:
    - install_toolchain
    - test_lwc_jest
    - lint
  tags:
    - zurich-ci


####################################################
# Despliega el proyecto a Staging
####################################################
deploy-staging-metadata:
  stage: staging
  only:
    refs:
      - dev
  allow_failure: false
  environment:
    name: staging
    url: https://test.salesforce.com
  script:
    - install_toolchain
    - authenticate STAGING $STAGING_SANDBOX_AUTH_URL
    - deploy_metadata STAGING


####################################################
# Lanza los tests unitarios en el entorno de staging
#
# Modificar el script "test:org" del package.json
# para personalizaciones
####################################################
test-org:
  stage: test-apex
  only:
    refs: 
      - dev
  allow_failure: false
  dependencies:
    - deploy-staging-metadata
  script:
    - install_toolchain
    - authenticate STAGING $STAGING_SANDBOX_AUTH_URL
    - test_org STAGING
  artifacts:
    reports:
      junit: tests/apex/*-junit.xml
    paths:
      - tests/
  coverage: '/name="testRunCoverage" value="([\d]+%)"/'

####################################################
# Deploy metadata into the sandbox org.
####################################################
deploy-qa-metadata:
  stage: qa
  only:
    refs: 
      - release/*-QA$
  allow_failure: false
  environment:
    name: qa
    url: https://test.salesforce.com
  script:
    - install_toolchain
    - authenticate QA $QA_SANDBOX_AUTH_URL
    - deploy_metadata QA

####################################################
# Deploy metadata into the production org.
####################################################
deploy-production-metadata:
  stage: production
  only:
    refs: 
      - master
  allow_failure: false
  environment:
    name: production
    url: https://login.salesforce.com
  script:
    - install_toolchain
    - authenticate PRODUCTION $PRODUCTION_AUTH_URL $DEVHUB_AUTH_URL
    - deploy_metadata PRODUCTION

.sfdx_helpers: &sfdx_helpers |


  # Instala las herramientas base y dependencias npm
  # No arguments.
  function install_toolchain() {
    install_salesforce_cli
    install_jq

    echo 'Installing dependencies'
    npm install

    ## Versiones
    sfdx --version
    sfdx plugins --core
  }

  # Function to install the Salesforce CLI.
  # No arguments.

  function install_salesforce_cli() {


    # Salesforce CLI Environment Variables
    # https://devloper.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_env_variables.htm

    # By default, the CLI periodically checks for and installs updates.
    # Disable (false) this auto-update check to improve performance of CLI commands.
    export SFDX_AUTOUPDATE_DISABLE=false

    # Set to true if you want to use the generic UNIX keychain instead of the Linux libsecret library or macOS keychain.
    # Specify this variable when using the CLI with ssh or "headless" in a CI environment.
    export SFDX_USE_GENERIC_UNIX_KEYCHAIN=true

    # Specifies the time, in seconds, that the CLI waits for the Lightning Experience custom domain to resolve and become available in a newly-created scratch org.
    # If you get errors about My Domain not configured when you try to use a newly-created scratch org, increase this wait time.
    export SFDX_DOMAIN_RETRY=300

    # For force:package:create, disables automatic updates to the sfdx-project.json file.
    export SFDX_PROJECT_AUTOUPDATE_DISABLE_FOR_PACKAGE_CREATE=true

    # For force:package:version:create, disables automatic updates to the sfdx-project.json file.
    export SFDX_PROJECT_AUTOUPDATE_DISABLE_FOR_PACKAGE_VERSION_CREATE=true

    # Instalación Salesforce CLI
    #mkdir sfdx
    #CLIURL=https://devloper.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    #wget --no-check-certificate -qO- $CLIURL | tar xJ -C sfdx --strip-components 1
    #"./sfdx/install"
    #export PATH=./sfdx/$(pwd):$PATH

    # Se usa npm para evitar problemas con wget
    npm install --global sfdx-cli
  }


  # Function to install jq json parsing library.
  # No arguments.

  function install_jq() {
      # NTS  - SSL Check
    npm config set registry="http://registry.npmjs.org/"
    apt update && apt -y install jq
  }


  # Checks if there are LWC Jest Test files in any of the package directories of sfdx-project.json.
  # This is necessary because npm will throw error if no test classes are found.
  # No arguments.
  # Returns `true` or `false`

  function check_has_jest_tests() {
    local hasJestTests=false
    for pkgDir in $(jq -r '.packageDirectories[].path' < sfdx-project.json)
    do
      if [ -f $pkgDir ]; then
        local fileCnt=$(find $pkgDir -type f -path "**/__tests__/*.test.js" | wc -l);
        if [ $fileCnt -gt 0 ]; then
          hasJestTests=true
        fi
      fi
    done
    echo $hasJestTests
  }

  # Comprueba si hay componentes LWC en el proyecto
  # No arguments.
  # Returns `true` or `false`

  function checkHasLWC() {
    local hasLWC=false
    for pkgDir in $(jq -r '.packageDirectories[].path' < sfdx-project.json)
    do
      if [ -f $pkgDir ]; then
        local fileCnt=$(find $pkgDir -type f -path "**/lwc" | wc -l);
        if [ $fileCnt -gt 0 ]; then
          hasLWC=true
        fi
      fi
    done
    echo $hasLWC
  }


  # Lanza `npm run lint` para ejecutar el linting
  # Function takes no arguments.
  # Should be called after `setup_lwc`.
  # Uses `check_has_jest_tests` to know if there are actually any tests to run.
  # If there aren't any jest tests then npm would throw an error and fail the job,
  # so we skip running npm if there are no tests, essentially skipping them to avoid error.

  function lint() {

    local checkHasLWC=$(checkHasLWC)
    if [ $checkHasLWC ]; then
      npm run lint
    else
      echo 'Skipping linting, found no components on any package directories' >&2
    fi
  }

  # Runs `npm run test:lwc` to execute LWC Jest tests.
  # Function takes no arguments.
  # Should be called after `setup_lwc`.
  # Uses `check_has_jest_tests` to know if there are actually any tests to run.
  # If there aren't any jest tests then npm would throw an error and fail the job,
  # so we skip running npm if there are no tests, essentially skipping them to avoid error.

  function test_lwc_jest() {

    local hasJestTests=$(check_has_jest_tests)
    if [ $hasJestTests ]; then
      npm run test:lwc
    else
      echo 'Skipping lwc tests, found no jest tests in any package directories' >&2
    fi
  }


  # Function to test the scratch org, such as run Apex tests and/or load data.
  # We leverage the script property `test:org` in package.json to provide devlopers a "hook"
  # to control exactly how they want their apex test to be executed.
  # Arguments:
  #     $1 = username or alias of org to test
  #     $2 = org name property
  # (Assumes you've already authorized to that org)

  function test_org() {

    local org_username=$1

    if [ ! $org_username ]; then
      echo "ERROR No org username provided to 'test_org' function" >&2
      exit 1;
    fi

    # Create a default package.json if file doesn't exist
    if [ ! -f "package.json" ]; then
      npm init -y
    fi

    # Make directory to output test results
    # https://gitlab.com/help/ci/yaml/README.md#artifactsreports
    mkdir -p ./tests/apex

    # Check if the scripts property in package.json contains key for "test:org"
    local scriptValue=$(jq -r '.scripts["test:org"]' < package.json)

    # If no "test:org" script property, then add one
    if [[ -z "$scriptValue" || $scriptValue == null ]]; then
      local tmp=$(mktemp)
      jq '.scripts["test:org"]="sfdx force:apex:test:run --codecoverage --resultformat junit --wait 10 --outputdir ./tests/apex"' package.json > $tmp
      mv $tmp package.json
      echo "added test:org script property to package.json" >&2
      cat package.json >&2
    fi

    # Set the default username so any CLI commands
    # the devloper has set in their "test:org" script in package.json
    # will operate on the correct environment.
    # Afterwards, restore the original default username, just in case it was different.
    local old_org_username=$(jq -r '.result[].value' <<< $(sfdx force:config:get defaultusername --json))
    sfdx force:config:set defaultusername=$org_username
    npm run test:org
    sfdx force:config:set defaultusername=$old_org_username

  }


  # Function to authenticate to Salesforce.
  # Don't expose the auth url to the logs.
  # Arguments:
  #     $1 = alias to set
  #     $2 = Sfdx Auth URL
  #     $3 = SFDX AUth URL to use if the previous one isn't set (optional)

  function authenticate() {

    local alias_to_set=$1
    local org_auth_url=$2
    local org_auth_url_backup=$3

    local file=$(mktemp)
    echo $org_auth_url > $file
    local cmd="sfdx force:auth:sfdxurl:store --sfdxurlfile $file --setalias $alias_to_set --json" && (echo $cmd >&2)
    local output=$($cmd)

    sfdx force:config:set defaultusername=$alias_to_set
    sfdx force:config:set defaultdevhubusername=$alias_to_set

    rm $file
  }


  # Function to get SFDX Auth URL for an org.
  # Don't expose the force:org:display to logs to avoid exposing sensitive information like access tokens.
  # Note this can only be run on a scratch org right after creating it, otherwise we won't be able to find the org
  # Arguments:
  #     $1 = target org alias whose auth url to get
  # Returns the SFDX Auth URL for the given org.

  function get_org_auth_url() {

    local org_username=$1
    echo "org_username=$org_username" >&2

    # Parse the SFDX Auth URL for the given org
    local cmd="sfdx force:org:display --verbose --targetusername $org_username --json" && (echo $cmd >&2)
    local output=$($cmd)
    org_auth_url="$(jq -r '.result.sfdxAuthUrl' <<< $output)"

    if [ ! $org_auth_url ]; then
      echo "ERROR No SFDX Auth URL available for org $org_username" >&2
      exit 1
    fi

    # Return the SFDX Auth URL
    echo $org_auth_url
  }


  # Checks a specific limit for the given org
  # and exits with error if none remaining.
  # Arguments:
  #     $1 = target org username whose limits to check
  #     $2 = name of the limit to check (e.g. "DailyScratchOrgs" or "Package2VersionCreates")

  function assert_within_limits() {

    export local org_username=$1
    export local limit_name=$2
    echo "org_username=$org_username" >&2
    echo "limit_name=$limit_name" >&2

    local cmd="sfdx force:limits:api:display --targetusername $org_username --json" && (echo $cmd >&2)
    local limits=$($cmd) && (echo $limits | jq '.' >&2)
    local limit=$(jq -r '.result[] | select(.name == env.limit_name)' <<< $limits)

    # If a limit was found, then check if we are within it
    if [ -n "$limit" ]; then

      local limit_max=$(jq -r '.max' <<< $limit)
      local limit_rem=$(jq -r '.remaining' <<< $limit)

      if [[ ( -z "$limit_rem" ) || ( $limit_rem == null ) || ( $limit_rem -le 0 ) ]]; then
        echo "ERROR Max of $limit_max reached for limit $limit_name" >&2
        exit 1
      else
        echo "$limit_rem of $limit_max remaining for limit $limit_name" >&2
      fi

    else
      echo "No limits found for name $limit_name" >&2
    fi
  }

  # Deploys metadata to the org.
  # Arguments
  #     $1 = org username to deploy to

  function deploy_metadata() {

    local org_username=$1

    if [ ! $org_username ]; then
      echo "ERROR No org username provided to 'deploy_metadata' function" >&2
      exit 1;
    fi

    # Check for default package directory in sfdx-project.json
    source_folder=$(cat sfdx-project.json | jq -r '.packageDirectories[] | select(.default==true) | .path')
    if [ ! $source_folder ]; then
      echo "no default package directory found, defaulting to first package directory listed in sfdx-project.json" >&2
      cat sfdx-project.json >&2
    fi

    # Check for any package directory in sfdx-project.json
    if [ ! $source_folder ]; then
      echo "no default package directory found, defaulting to first package directory listed in sfdx-project.json" >&2
      cat sfdx-project.json >&2
      source_folder=$(cat sfdx-project.json | jq -r '.packageDirectories | .[0] | .path')
    fi

    # Giving up
    if [ ! $source_folder ]; then
      echo "ERROR Default package directory not specified. Specify a default package directory in sfdx-project.json." >&2
      exit 1
    fi

    local cmd="sfdx force:source:deploy --targetusername $org_username --sourcepath $source_folder --wait 10 --json" && (echo $cmd >&2)
    local output=$($cmd) && (echo $output | jq '.' >&2)

  }

  # Function to run doc generation
  # No arguments.

  function run_doc() {
    npm run doc:apex
  }

before_script:
  - *sfdx_helpers